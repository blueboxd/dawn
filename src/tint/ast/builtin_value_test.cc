// Copyright 2022 The Tint Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

////////////////////////////////////////////////////////////////////////////////
// File generated by tools/src/cmd/gen
// using the template:
//   src/tint/ast/builtin_value_test.cc.tmpl
//
// Do not modify this file directly
////////////////////////////////////////////////////////////////////////////////

#include "src/tint/ast/builtin_value.h"

#include <string>

#include "src/tint/ast/test_helper.h"
#include "src/tint/utils/string.h"

namespace tint::ast {
namespace {

namespace parse_print_tests {

struct Case {
    const char* string;
    BuiltinValue value;
};

inline std::ostream& operator<<(std::ostream& out, Case c) {
    return out << "'" << std::string(c.string) << "'";
}

static constexpr Case kValidCases[] = {
    {"frag_depth", BuiltinValue::kFragDepth},
    {"front_facing", BuiltinValue::kFrontFacing},
    {"global_invocation_id", BuiltinValue::kGlobalInvocationId},
    {"instance_index", BuiltinValue::kInstanceIndex},
    {"local_invocation_id", BuiltinValue::kLocalInvocationId},
    {"local_invocation_index", BuiltinValue::kLocalInvocationIndex},
    {"num_workgroups", BuiltinValue::kNumWorkgroups},
    {"position", BuiltinValue::kPosition},
    {"sample_index", BuiltinValue::kSampleIndex},
    {"sample_mask", BuiltinValue::kSampleMask},
    {"vertex_index", BuiltinValue::kVertexIndex},
    {"workgroup_id", BuiltinValue::kWorkgroupId},
};

static constexpr Case kInvalidCases[] = {
    {"fragdeccth", BuiltinValue::kInvalid},
    {"flaget3", BuiltinValue::kInvalid},
    {"fVag_depth", BuiltinValue::kInvalid},
    {"1ront_facing", BuiltinValue::kInvalid},
    {"front_fJcqng", BuiltinValue::kInvalid},
    {"frllnt_facin77", BuiltinValue::kInvalid},
    {"global_invoqqtionppHid", BuiltinValue::kInvalid},
    {"clvbal_inocaionid", BuiltinValue::kInvalid},
    {"global_Gvocation_id", BuiltinValue::kInvalid},
    {"invtance_iniiex", BuiltinValue::kInvalid},
    {"8nstanceWWindex", BuiltinValue::kInvalid},
    {"insxxanceindex", BuiltinValue::kInvalid},
    {"lXcal_invoation_igg", BuiltinValue::kInvalid},
    {"Xocal_nvocatin_Vd", BuiltinValue::kInvalid},
    {"local_invoca3ion_id", BuiltinValue::kInvalid},
    {"local_invocation_indeE", BuiltinValue::kInvalid},
    {"loTTal_invPPcatin_index", BuiltinValue::kInvalid},
    {"loal_invocadxxion_index", BuiltinValue::kInvalid},
    {"num_work44roups", BuiltinValue::kInvalid},
    {"num_wVVrkgSSoups", BuiltinValue::kInvalid},
    {"Rum_wokgrou2Rs", BuiltinValue::kInvalid},
    {"oFi9ion", BuiltinValue::kInvalid},
    {"postion", BuiltinValue::kInvalid},
    {"ROOoHiiVn", BuiltinValue::kInvalid},
    {"samply_inde", BuiltinValue::kInvalid},
    {"snrrmpl77l_indGx", BuiltinValue::kInvalid},
    {"00ample4index", BuiltinValue::kInvalid},
    {"smoo_mask", BuiltinValue::kInvalid},
    {"sampzemask", BuiltinValue::kInvalid},
    {"ppaplii1_mas", BuiltinValue::kInvalid},
    {"vertex_iXXdex", BuiltinValue::kInvalid},
    {"5nnertex_99IIdex", BuiltinValue::kInvalid},
    {"verYeaaHHrrndeSS", BuiltinValue::kInvalid},
    {"workkgHo_i", BuiltinValue::kInvalid},
    {"worRgoupjid", BuiltinValue::kInvalid},
    {"wrkgrupbid", BuiltinValue::kInvalid},
};

using BuiltinValueParseTest = testing::TestWithParam<Case>;

TEST_P(BuiltinValueParseTest, Parse) {
    const char* string = GetParam().string;
    BuiltinValue expect = GetParam().value;
    EXPECT_EQ(expect, ParseBuiltinValue(string));
}

INSTANTIATE_TEST_SUITE_P(ValidCases, BuiltinValueParseTest, testing::ValuesIn(kValidCases));
INSTANTIATE_TEST_SUITE_P(InvalidCases, BuiltinValueParseTest, testing::ValuesIn(kInvalidCases));

using BuiltinValuePrintTest = testing::TestWithParam<Case>;

TEST_P(BuiltinValuePrintTest, Print) {
    BuiltinValue value = GetParam().value;
    const char* expect = GetParam().string;
    EXPECT_EQ(expect, utils::ToString(value));
}

INSTANTIATE_TEST_SUITE_P(ValidCases, BuiltinValuePrintTest, testing::ValuesIn(kValidCases));

}  // namespace parse_print_tests

}  // namespace
}  // namespace tint::ast
