// Copyright 2022 The Tint Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

////////////////////////////////////////////////////////////////////////////////
// File generated by tools/src/cmd/gen
// using the template:
//   src/tint/type/builtin_test.cc.tmpl
//
// Do not modify this file directly
////////////////////////////////////////////////////////////////////////////////

#include "src/tint/type/builtin.h"

#include <string>

#include "gtest/gtest.h"

#include "src/tint/utils/string.h"

namespace tint::type {
namespace {

namespace parse_print_tests {

struct Case {
    const char* string;
    Builtin value;
};

inline std::ostream& operator<<(std::ostream& out, Case c) {
    return out << "'" << std::string(c.string) << "'";
}

static constexpr Case kValidCases[] = {
    {"mat2x2f", Builtin::kMat2X2F}, {"mat2x2h", Builtin::kMat2X2H}, {"mat2x3f", Builtin::kMat2X3F},
    {"mat2x3h", Builtin::kMat2X3H}, {"mat2x4f", Builtin::kMat2X4F}, {"mat2x4h", Builtin::kMat2X4H},
    {"mat3x2f", Builtin::kMat3X2F}, {"mat3x2h", Builtin::kMat3X2H}, {"mat3x3f", Builtin::kMat3X3F},
    {"mat3x3h", Builtin::kMat3X3H}, {"mat3x4f", Builtin::kMat3X4F}, {"mat3x4h", Builtin::kMat3X4H},
    {"mat4x2f", Builtin::kMat4X2F}, {"mat4x2h", Builtin::kMat4X2H}, {"mat4x3f", Builtin::kMat4X3F},
    {"mat4x3h", Builtin::kMat4X3H}, {"mat4x4f", Builtin::kMat4X4F}, {"mat4x4h", Builtin::kMat4X4H},
    {"vec2f", Builtin::kVec2F},     {"vec2h", Builtin::kVec2H},     {"vec2i", Builtin::kVec2I},
    {"vec2u", Builtin::kVec2U},     {"vec3f", Builtin::kVec3F},     {"vec3h", Builtin::kVec3H},
    {"vec3i", Builtin::kVec3I},     {"vec3u", Builtin::kVec3U},     {"vec4f", Builtin::kVec4F},
    {"vec4h", Builtin::kVec4H},     {"vec4i", Builtin::kVec4I},     {"vec4u", Builtin::kVec4U},
};

static constexpr Case kInvalidCases[] = {
    {"at2x2cc", Builtin::kUndefined},     {"l23f", Builtin::kUndefined},
    {"matVx2f", Builtin::kUndefined},     {"mat212h", Builtin::kUndefined},
    {"mqtJx2h", Builtin::kUndefined},     {"mat2x27ll", Builtin::kUndefined},
    {"ppqqt23HH", Builtin::kUndefined},   {"macv", Builtin::kUndefined},
    {"bt2xGf", Builtin::kUndefined},      {"mat2iivh", Builtin::kUndefined},
    {"8WWt2x3h", Builtin::kUndefined},    {"mxx2x3h", Builtin::kUndefined},
    {"mX2x4gg", Builtin::kUndefined},     {"a2xXf", Builtin::kUndefined},
    {"mat234f", Builtin::kUndefined},     {"Eat2x4h", Builtin::kUndefined},
    {"mPTT2x4h", Builtin::kUndefined},    {"mat2xdxx", Builtin::kUndefined},
    {"m44t3x2f", Builtin::kUndefined},    {"maSS3xVVf", Builtin::kUndefined},
    {"RatR22f", Builtin::kUndefined},     {"mF3x9h", Builtin::kUndefined},
    {"matx2h", Builtin::kUndefined},      {"VOORRH2h", Builtin::kUndefined},
    {"ma3xyf", Builtin::kUndefined},      {"llnarr3773f", Builtin::kUndefined},
    {"mat34300", Builtin::kUndefined},    {"a3ooh", Builtin::kUndefined},
    {"zz3x3h", Builtin::kUndefined},      {"miitppx1", Builtin::kUndefined},
    {"mat3xXXf", Builtin::kUndefined},    {"9II5ann3x4f", Builtin::kUndefined},
    {"mataSSrHHYf", Builtin::kUndefined}, {"makkh", Builtin::kUndefined},
    {"jatgRx", Builtin::kUndefined},      {"mb3x4", Builtin::kUndefined},
    {"mat4xjf", Builtin::kUndefined},     {"at4x2f", Builtin::kUndefined},
    {"q4x2f", Builtin::kUndefined},       {"matNN2h", Builtin::kUndefined},
    {"at42vv", Builtin::kUndefined},      {"QQt4x2h", Builtin::kUndefined},
    {"maffxr", Builtin::kUndefined},      {"mat4xjf", Builtin::kUndefined},
    {"mNNw4x38", Builtin::kUndefined},    {"matx3h", Builtin::kUndefined},
    {"mrrt4x3h", Builtin::kUndefined},    {"Gat4x3h", Builtin::kUndefined},
    {"mat4x4FF", Builtin::kUndefined},    {"at4f", Builtin::kUndefined},
    {"marrx4f", Builtin::kUndefined},     {"t4x4h", Builtin::kUndefined},
    {"Da4xJJh", Builtin::kUndefined},     {"ma84", Builtin::kUndefined},
    {"e2k", Builtin::kUndefined},         {"vecf", Builtin::kUndefined},
    {"Jecf", Builtin::kUndefined},        {"ec2h", Builtin::kUndefined},
    {"_KKttcH", Builtin::kUndefined},     {"vexxh", Builtin::kUndefined},
    {"__qcF", Builtin::kUndefined},       {"vc2qq", Builtin::kUndefined},
    {"33e62i", Builtin::kUndefined},      {"6QQott2u", Builtin::kUndefined},
    {"v6c2u", Builtin::kUndefined},       {"zzc2O6", Builtin::kUndefined},
    {"vyyc3f", Builtin::kUndefined},      {"vcZZ", Builtin::kUndefined},
    {"ecWq4f", Builtin::kUndefined},      {"vOO3h", Builtin::kUndefined},
    {"oYe3", Builtin::kUndefined},        {"v3", Builtin::kUndefined},
    {"Fe3i", Builtin::kUndefined},        {"vwci", Builtin::kUndefined},
    {"vefi", Builtin::kUndefined},        {"KKeq3u", Builtin::kUndefined},
    {"vFmm3u", Builtin::kUndefined},      {"vecu", Builtin::kUndefined},
    {"qc4f", Builtin::kUndefined},        {"vecbb", Builtin::kUndefined},
    {"iic4", Builtin::kUndefined},        {"vqOOh", Builtin::kUndefined},
    {"vevvTTh", Builtin::kUndefined},     {"veFF4h", Builtin::kUndefined},
    {"00PfQ", Builtin::kUndefined},       {"vec4P", Builtin::kUndefined},
    {"vec77s", Builtin::kUndefined},      {"vecbbCu", Builtin::kUndefined},
    {"vecXXu", Builtin::kUndefined},      {"CCOOec4", Builtin::kUndefined},
};

using BuiltinParseTest = testing::TestWithParam<Case>;

TEST_P(BuiltinParseTest, Parse) {
    const char* string = GetParam().string;
    Builtin expect = GetParam().value;
    EXPECT_EQ(expect, ParseBuiltin(string));
}

INSTANTIATE_TEST_SUITE_P(ValidCases, BuiltinParseTest, testing::ValuesIn(kValidCases));
INSTANTIATE_TEST_SUITE_P(InvalidCases, BuiltinParseTest, testing::ValuesIn(kInvalidCases));

using BuiltinPrintTest = testing::TestWithParam<Case>;

TEST_P(BuiltinPrintTest, Print) {
    Builtin value = GetParam().value;
    const char* expect = GetParam().string;
    EXPECT_EQ(expect, utils::ToString(value));
}

INSTANTIATE_TEST_SUITE_P(ValidCases, BuiltinPrintTest, testing::ValuesIn(kValidCases));

}  // namespace parse_print_tests

}  // namespace
}  // namespace tint::type
