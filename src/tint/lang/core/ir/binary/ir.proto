// Copyright 2023 The Tint Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package tint.core.ir.binary.pb;

message Module {
    repeated TypeDecl types = 1;
    repeated Value values = 2;
    Block root_block = 3;
    repeated Function functions = 4;
    repeated Block blocks = 5;
}

////////////////////////////////////////////////////////////////////////////////
// Types
////////////////////////////////////////////////////////////////////////////////
message TypeDecl {
    oneof kind {
        BasicType basic = 1;
        VectorType vector = 2;
        MatrixType matrix = 3;
        ArrayType array = 4;
        uint32 atomic = 5;  // Module.types
        // TODO: textures, samplers
    }
}

// Non-compound types
enum BasicType {
    void = 0;
    bool = 1;
    i32 = 2;
    u32 = 3;
    f32 = 4;
    f16 = 5;
}

message VectorType {
    uint32 width = 1;
    uint32 element_type = 2;  // Module.types
}

message MatrixType {
    uint32 num_columns = 1;
    uint32 num_width = 2;
    uint32 element_type = 3;  // Module.types
}

message ArrayType {
    uint32 count = 1;
    uint32 element_type = 2;  // Module.types
}

////////////////////////////////////////////////////////////////////////////////
// Values
////////////////////////////////////////////////////////////////////////////////
message Value {
    ValueKind kind = 1;
    uint32 type = 2;  // Module.types
    optional string name = 3;
}

enum ValueKind {
    instruction_result = 0;
    function_parameter = 1;
}

////////////////////////////////////////////////////////////////////////////////
// Functions
////////////////////////////////////////////////////////////////////////////////
message Function {
    optional string name = 1;
    uint32 return_type = 2;
    optional PipelineStage pipeline_stage = 3;
    optional WorkgroupSize workgroup_size = 4;
    repeated uint32 parameters = 5;  // Module.values
    uint32 block = 6;                // Module.blocks
}

enum PipelineStage {
    Compute = 0;
    Fragment = 1;
    Vertex = 2;
}

message WorkgroupSize {
    uint32 x = 1;
    uint32 y = 2;
    uint32 z = 3;
}

////////////////////////////////////////////////////////////////////////////////
// Blocks
////////////////////////////////////////////////////////////////////////////////
message Block {
    repeated uint32 parameters = 1;  // Module.values
    repeated Instruction instructions = 2;
}

////////////////////////////////////////////////////////////////////////////////
// Instructions
////////////////////////////////////////////////////////////////////////////////
message Instruction {
    InstructionKind kind = 1;
    repeated uint32 operands = 2;
    repeated uint32 results = 3;
}

enum InstructionKind {
    Return = 0;
    UnaryOp = 1;
    BinaryOp = 2;
    Builtin = 3;
    Constructor = 4;
}
