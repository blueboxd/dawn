#include <metal_stdlib>

using namespace metal;

template<typename T, size_t N>
struct tint_array {
    const constant T& operator[](size_t i) const constant { return elements[i]; }
    device T& operator[](size_t i) device { return elements[i]; }
    const device T& operator[](size_t i) const device { return elements[i]; }
    thread T& operator[](size_t i) thread { return elements[i]; }
    const thread T& operator[](size_t i) const thread { return elements[i]; }
    threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
    const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
    T elements[N];
};

struct Inner {
  /* 0x0000 */ int x;
};

struct S {
  /* 0x0000 */ packed_int3 a;
  /* 0x000c */ int b;
  /* 0x0010 */ packed_uint3 c;
  /* 0x001c */ uint d;
  /* 0x0020 */ packed_float3 e;
  /* 0x002c */ float f;
  /* 0x0030 */ float2x3 g;
  /* 0x0050 */ float3x2 h;
  /* 0x0068 */ Inner i;
  /* 0x006c */ tint_array<Inner, 4> j;
  /* 0x007c */ tint_array<int8_t, 4> tint_pad;
};

kernel void tint_symbol(device S* tint_symbol_3 [[buffer(0)]]) {
  (*(tint_symbol_3)).a = int3(0);
  (*(tint_symbol_3)).b = 0;
  (*(tint_symbol_3)).c = uint3(0u);
  (*(tint_symbol_3)).d = 0u;
  (*(tint_symbol_3)).e = float3(0.0f);
  (*(tint_symbol_3)).f = 0.0f;
  (*(tint_symbol_3)).g = float2x3(float3(0.0f), float3(0.0f));
  (*(tint_symbol_3)).h = float3x2(float2(0.0f), float2(0.0f), float2(0.0f));
  Inner const tint_symbol_1 = Inner{};
  (*(tint_symbol_3)).i = tint_symbol_1;
  tint_array<Inner, 4> const tint_symbol_2 = tint_array<Inner, 4>{};
  (*(tint_symbol_3)).j = tint_symbol_2;
  return;
}

