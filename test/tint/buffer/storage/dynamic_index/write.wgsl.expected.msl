#include <metal_stdlib>

using namespace metal;

template<typename T, size_t N>
struct tint_array {
    const constant T& operator[](size_t i) const constant { return elements[i]; }
    device T& operator[](size_t i) device { return elements[i]; }
    const device T& operator[](size_t i) const device { return elements[i]; }
    thread T& operator[](size_t i) thread { return elements[i]; }
    const thread T& operator[](size_t i) const thread { return elements[i]; }
    threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
    const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
    T elements[N];
};

struct Inner {
  /* 0x0000 */ packed_int3 a;
  /* 0x000c */ int b;
  /* 0x0010 */ packed_uint3 c;
  /* 0x001c */ uint d;
  /* 0x0020 */ packed_float3 e;
  /* 0x002c */ float f;
  /* 0x0030 */ float2x3 g;
  /* 0x0050 */ float3x2 h;
  /* 0x0068 */ tint_array<int8_t, 8> tint_pad;
  /* 0x0070 */ tint_array<int4, 4> i;
};

struct S {
  /* 0x0000 */ tint_array<Inner, 1> arr;
};

void tint_symbol_inner(uint idx, device S* const tint_symbol_2) {
  (*(tint_symbol_2)).arr[idx].a = int3(0);
  (*(tint_symbol_2)).arr[idx].b = 0;
  (*(tint_symbol_2)).arr[idx].c = uint3(0u);
  (*(tint_symbol_2)).arr[idx].d = 0u;
  (*(tint_symbol_2)).arr[idx].e = float3(0.0f);
  (*(tint_symbol_2)).arr[idx].f = 0.0f;
  (*(tint_symbol_2)).arr[idx].g = float2x3(float3(0.0f), float3(0.0f));
  (*(tint_symbol_2)).arr[idx].h = float3x2(float2(0.0f), float2(0.0f), float2(0.0f));
  tint_array<int4, 4> const tint_symbol_1 = tint_array<int4, 4>{};
  (*(tint_symbol_2)).arr[idx].i = tint_symbol_1;
}

kernel void tint_symbol(device S* tint_symbol_3 [[buffer(0)]], uint idx [[thread_index_in_threadgroup]]) {
  tint_symbol_inner(idx, tint_symbol_3);
  return;
}

