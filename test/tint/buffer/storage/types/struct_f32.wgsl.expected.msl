#include <metal_stdlib>

using namespace metal;

template<typename T, size_t N>
struct tint_array {
    const constant T& operator[](size_t i) const constant { return elements[i]; }
    device T& operator[](size_t i) device { return elements[i]; }
    const device T& operator[](size_t i) const device { return elements[i]; }
    thread T& operator[](size_t i) thread { return elements[i]; }
    const thread T& operator[](size_t i) const thread { return elements[i]; }
    threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
    const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
    T elements[N];
};

struct Inner {
  /* 0x0000 */ float scalar_f32;
  /* 0x0004 */ tint_array<int8_t, 12> tint_pad;
  /* 0x0010 */ packed_float3 vec3_f32;
  /* 0x001c */ tint_array<int8_t, 4> tint_pad_1;
  /* 0x0020 */ float2x4 mat2x4_f32;
};

struct S {
  /* 0x0000 */ Inner inner;
};

void assign_and_preserve_padding_1(device Inner* const dest, Inner value) {
  (*(dest)).scalar_f32 = value.scalar_f32;
  (*(dest)).vec3_f32 = float3(value.vec3_f32);
  (*(dest)).mat2x4_f32 = value.mat2x4_f32;
}

void assign_and_preserve_padding(device S* const dest, S value) {
  assign_and_preserve_padding_1(&((*(dest)).inner), value.inner);
}

kernel void tint_symbol(const device S* tint_symbol_1 [[buffer(1)]], device S* tint_symbol_2 [[buffer(0)]]) {
  S const t = *(tint_symbol_1);
  assign_and_preserve_padding(tint_symbol_2, t);
  return;
}

