#include <metal_stdlib>

using namespace metal;

template<typename T, size_t N>
struct tint_array {
    const constant T& operator[](size_t i) const constant { return elements[i]; }
    device T& operator[](size_t i) device { return elements[i]; }
    const device T& operator[](size_t i) const device { return elements[i]; }
    thread T& operator[](size_t i) thread { return elements[i]; }
    const thread T& operator[](size_t i) const thread { return elements[i]; }
    threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
    const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
    T elements[N];
};

struct Inner {
  /* 0x0000 */ float3x4 m;
  /* 0x0030 */ tint_array<int8_t, 16> tint_pad;
};

struct Outer {
  /* 0x0000 */ tint_array<Inner, 4> a;
};

kernel void f(const constant tint_array<Outer, 4>* tint_symbol [[buffer(0)]]) {
  tint_array<Outer, 4> const l_a = *(tint_symbol);
  Outer const l_a_3 = (*(tint_symbol))[3];
  tint_array<Inner, 4> const l_a_3_a = (*(tint_symbol))[3].a;
  Inner const l_a_3_a_2 = (*(tint_symbol))[3].a[2];
  float3x4 const l_a_3_a_2_m = (*(tint_symbol))[3].a[2].m;
  float4 const l_a_3_a_2_m_1 = (*(tint_symbol))[3].a[2].m[1];
  float const l_a_3_a_2_m_1_0 = (*(tint_symbol))[3].a[2].m[1][0];
  return;
}

