#include <metal_stdlib>

using namespace metal;

template<typename T, size_t N>
struct tint_array {
    const constant T& operator[](size_t i) const constant { return elements[i]; }
    device T& operator[](size_t i) device { return elements[i]; }
    const device T& operator[](size_t i) const device { return elements[i]; }
    thread T& operator[](size_t i) thread { return elements[i]; }
    const thread T& operator[](size_t i) const thread { return elements[i]; }
    threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
    const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
    T elements[N];
};

int i() {
  thread int tint_symbol_2 = 0;
  tint_symbol_2 = as_type<int>((as_type<uint>(tint_symbol_2) + as_type<uint>(1)));
  return tint_symbol_2;
}

kernel void f(const constant tint_array<float4x3, 4>* tint_symbol_3 [[buffer(0)]]) {
  int const tint_symbol = i();
  int const p_a_i_save = tint_symbol;
  int const tint_symbol_1 = i();
  int const p_a_i_i_save = tint_symbol_1;
  tint_array<float4x3, 4> const l_a = *(tint_symbol_3);
  float4x3 const l_a_i = (*(tint_symbol_3))[p_a_i_save];
  float3 const l_a_i_i = (*(tint_symbol_3))[p_a_i_save][p_a_i_i_save];
  return;
}

