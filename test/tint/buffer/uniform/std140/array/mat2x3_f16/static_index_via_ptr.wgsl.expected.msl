#include <metal_stdlib>

using namespace metal;

template<typename T, size_t N>
struct tint_array {
    const constant T& operator[](size_t i) const constant { return elements[i]; }
    device T& operator[](size_t i) device { return elements[i]; }
    const device T& operator[](size_t i) const device { return elements[i]; }
    thread T& operator[](size_t i) thread { return elements[i]; }
    const thread T& operator[](size_t i) const thread { return elements[i]; }
    threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
    const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
    T elements[N];
};

kernel void f(const constant tint_array<half2x3, 4>* tint_symbol [[buffer(0)]]) {
  tint_array<half2x3, 4> const l_a = *(tint_symbol);
  half2x3 const l_a_i = (*(tint_symbol))[2];
  half3 const l_a_i_i = (*(tint_symbol))[2][1];
  return;
}

