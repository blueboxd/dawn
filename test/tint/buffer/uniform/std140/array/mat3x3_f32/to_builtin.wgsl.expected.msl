#include <metal_stdlib>

using namespace metal;

template<typename T, size_t N>
struct tint_array {
    const constant T& operator[](size_t i) const constant { return elements[i]; }
    device T& operator[](size_t i) device { return elements[i]; }
    const device T& operator[](size_t i) const device { return elements[i]; }
    thread T& operator[](size_t i) thread { return elements[i]; }
    const thread T& operator[](size_t i) const thread { return elements[i]; }
    threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
    const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
    T elements[N];
};

kernel void f(const constant tint_array<float3x3, 4>* tint_symbol [[buffer(0)]]) {
  float3x3 const t = transpose((*(tint_symbol))[2]);
  float const l = length(float3((*(tint_symbol))[0][1]).zxy);
  float const a = fabs(float3((*(tint_symbol))[0][1]).zxy[0]);
  return;
}

