#include <metal_stdlib>

using namespace metal;

template<typename T, size_t N>
struct tint_array {
    const constant T& operator[](size_t i) const constant { return elements[i]; }
    device T& operator[](size_t i) device { return elements[i]; }
    const device T& operator[](size_t i) const device { return elements[i]; }
    thread T& operator[](size_t i) thread { return elements[i]; }
    const thread T& operator[](size_t i) const thread { return elements[i]; }
    threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
    const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
    T elements[N];
};

void f() {
  int i = 0;
  while (true) {
    if (true) {
      break;
    }
    {
    }
    {
      tint_array<int, 1> const tint_symbol = tint_array<int, 1>{1};
      i = as_type<int>((as_type<uint>(i) + as_type<uint>(tint_symbol[0])));
    }
  }
}

