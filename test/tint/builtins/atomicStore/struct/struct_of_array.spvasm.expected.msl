#include <metal_stdlib>

using namespace metal;

template<typename T, size_t N>
struct tint_array {
    const constant T& operator[](size_t i) const constant { return elements[i]; }
    device T& operator[](size_t i) device { return elements[i]; }
    const device T& operator[](size_t i) const device { return elements[i]; }
    thread T& operator[](size_t i) thread { return elements[i]; }
    const thread T& operator[](size_t i) const thread { return elements[i]; }
    threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
    const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
    T elements[N];
};

struct S_atomic {
  int x;
  tint_array<atomic_uint, 10> a;
  uint y;
};

struct S {
  int x;
  tint_array<uint, 10> a;
  uint y;
};

void compute_main_inner(uint local_invocation_index_2, threadgroup S_atomic* const tint_symbol) {
  uint idx = 0u;
  (*(tint_symbol)).x = 0;
  (*(tint_symbol)).y = 0u;
  idx = local_invocation_index_2;
  while (true) {
    uint const x_30 = idx;
    if (!((x_30 < 10u))) {
      break;
    }
    uint const x_35 = idx;
    atomic_store_explicit(&((*(tint_symbol)).a[x_35]), 0u, memory_order_relaxed);
    {
      uint const x_41 = idx;
      idx = (x_41 + 1u);
    }
  }
  threadgroup_barrier(mem_flags::mem_threadgroup);
  atomic_store_explicit(&((*(tint_symbol)).a[4]), 1u, memory_order_relaxed);
  return;
}

void compute_main_1(thread uint* const tint_symbol_1, threadgroup S_atomic* const tint_symbol_2) {
  uint const x_53 = *(tint_symbol_1);
  compute_main_inner(x_53, tint_symbol_2);
  return;
}

void compute_main_inner_1(uint local_invocation_index_1_param, threadgroup S_atomic* const tint_symbol_3, thread uint* const tint_symbol_4) {
  {
    (*(tint_symbol_3)).x = 0;
    (*(tint_symbol_3)).y = 0u;
  }
  for(uint idx_1 = local_invocation_index_1_param; (idx_1 < 10u); idx_1 = (idx_1 + 1u)) {
    uint const i = idx_1;
    atomic_store_explicit(&((*(tint_symbol_3)).a[i]), 0u, memory_order_relaxed);
  }
  threadgroup_barrier(mem_flags::mem_threadgroup);
  *(tint_symbol_4) = local_invocation_index_1_param;
  compute_main_1(tint_symbol_4, tint_symbol_3);
}

kernel void compute_main(uint local_invocation_index_1_param [[thread_index_in_threadgroup]]) {
  threadgroup S_atomic tint_symbol_5;
  thread uint tint_symbol_6 = 0u;
  compute_main_inner_1(local_invocation_index_1_param, &(tint_symbol_5), &(tint_symbol_6));
  return;
}

